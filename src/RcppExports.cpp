// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// volume_to_windows
NumericVector volume_to_windows(NumericVector V, int stride, int width, int displacement);
RcppExport SEXP _dl4ni_volume_to_windows(SEXP VSEXP, SEXP strideSEXP, SEXP widthSEXP, SEXP displacementSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type displacement(displacementSEXP);
    rcpp_result_gen = Rcpp::wrap(volume_to_windows(V, stride, width, displacement));
    return rcpp_result_gen;
END_RCPP
}
// get_windows_at
NumericVector get_windows_at(NumericVector V, int width, IntegerVector x, IntegerVector y, IntegerVector z);
RcppExport SEXP _dl4ni_get_windows_at(SEXP VSEXP, SEXP widthSEXP, SEXP xSEXP, SEXP ySEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(get_windows_at(V, width, x, y, z));
    return rcpp_result_gen;
END_RCPP
}
// windows_to_volume
NumericVector windows_to_volume(NumericVector V, int stride, int width, IntegerVector target_dims, int displacement);
RcppExport SEXP _dl4ni_windows_to_volume(SEXP VSEXP, SEXP strideSEXP, SEXP widthSEXP, SEXP target_dimsSEXP, SEXP displacementSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type target_dims(target_dimsSEXP);
    Rcpp::traits::input_parameter< int >::type displacement(displacementSEXP);
    rcpp_result_gen = Rcpp::wrap(windows_to_volume(V, stride, width, target_dims, displacement));
    return rcpp_result_gen;
END_RCPP
}
// windows_to_volume_label
NumericVector windows_to_volume_label(NumericVector V, int stride, int width, IntegerVector target_dims, int displacement);
RcppExport SEXP _dl4ni_windows_to_volume_label(SEXP VSEXP, SEXP strideSEXP, SEXP widthSEXP, SEXP target_dimsSEXP, SEXP displacementSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type target_dims(target_dimsSEXP);
    Rcpp::traits::input_parameter< int >::type displacement(displacementSEXP);
    rcpp_result_gen = Rcpp::wrap(windows_to_volume_label(V, stride, width, target_dims, displacement));
    return rcpp_result_gen;
END_RCPP
}
// results_to_volume
void results_to_volume(NumericVector V, int width, NumericVector res, NumericVector counts, IntegerVector x, IntegerVector y, IntegerVector z);
RcppExport SEXP _dl4ni_results_to_volume(SEXP VSEXP, SEXP widthSEXP, SEXP resSEXP, SEXP countsSEXP, SEXP xSEXP, SEXP ySEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type res(resSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z(zSEXP);
    results_to_volume(V, width, res, counts, x, y, z);
    return R_NilValue;
END_RCPP
}
// results_to_fuzzy_volume
void results_to_fuzzy_volume(NumericVector V, int width, int num_classes, NumericVector res, NumericVector counts, IntegerVector x, IntegerVector y, IntegerVector z);
RcppExport SEXP _dl4ni_results_to_fuzzy_volume(SEXP VSEXP, SEXP widthSEXP, SEXP num_classesSEXP, SEXP resSEXP, SEXP countsSEXP, SEXP xSEXP, SEXP ySEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type num_classes(num_classesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type res(resSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z(zSEXP);
    results_to_fuzzy_volume(V, width, num_classes, res, counts, x, y, z);
    return R_NilValue;
END_RCPP
}
// results_to_volume_label
void results_to_volume_label(NumericVector V, int width, NumericVector res, IntegerVector x, IntegerVector y, IntegerVector z);
RcppExport SEXP _dl4ni_results_to_volume_label(SEXP VSEXP, SEXP widthSEXP, SEXP resSEXP, SEXP xSEXP, SEXP ySEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type res(resSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z(zSEXP);
    results_to_volume_label(V, width, res, x, y, z);
    return R_NilValue;
END_RCPP
}
// results_to_volume_label_with_distance
void results_to_volume_label_with_distance(NumericVector V, int width, NumericVector res, NumericVector last_distance, IntegerVector x, IntegerVector y, IntegerVector z);
RcppExport SEXP _dl4ni_results_to_volume_label_with_distance(SEXP VSEXP, SEXP widthSEXP, SEXP resSEXP, SEXP last_distanceSEXP, SEXP xSEXP, SEXP ySEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type res(resSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type last_distance(last_distanceSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z(zSEXP);
    results_to_volume_label_with_distance(V, width, res, last_distance, x, y, z);
    return R_NilValue;
END_RCPP
}
// regularize
NumericVector regularize(NumericVector image, NumericVector kernel);
RcppExport SEXP _dl4ni_regularize(SEXP imageSEXP, SEXP kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type image(imageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kernel(kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(regularize(image, kernel));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_dl4ni_volume_to_windows", (DL_FUNC) &_dl4ni_volume_to_windows, 4},
    {"_dl4ni_get_windows_at", (DL_FUNC) &_dl4ni_get_windows_at, 5},
    {"_dl4ni_windows_to_volume", (DL_FUNC) &_dl4ni_windows_to_volume, 5},
    {"_dl4ni_windows_to_volume_label", (DL_FUNC) &_dl4ni_windows_to_volume_label, 5},
    {"_dl4ni_results_to_volume", (DL_FUNC) &_dl4ni_results_to_volume, 7},
    {"_dl4ni_results_to_fuzzy_volume", (DL_FUNC) &_dl4ni_results_to_fuzzy_volume, 8},
    {"_dl4ni_results_to_volume_label", (DL_FUNC) &_dl4ni_results_to_volume_label, 6},
    {"_dl4ni_results_to_volume_label_with_distance", (DL_FUNC) &_dl4ni_results_to_volume_label_with_distance, 7},
    {"_dl4ni_regularize", (DL_FUNC) &_dl4ni_regularize, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_dl4ni(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
